% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/PipeOps.R
\name{mlr_pipeops_splitmultiout}
\alias{mlr_pipeops_splitmultiout}
\alias{PipeOpSplitMultiout}
\title{PipeOpSplitMultiout}
\format{
\code{\link{R6Class}} inheriting from \code{\link{PipeOp}}.
}
\description{
Splits a \link[=TaskMultiOutput]{multioutput Task} into several \link[mlr3:Task]{Tasks}.

For each target_type in the original \link[=TaskMultiOutput]{multioutput Task}, a new \link[mlr3:Task]{Task}
containing the respective target and task_type is constructed.

This \code{\link{PipeOp}} creates a \code{\link{Multiplicity}}, which means that subsequent \code{\link{PipeOp}}s are executed
multiple times.

Note that \code{\link{Multiplicity}} is currently an experimental feature and the implementation or UI
may change.
}
\section{Construction}{
\preformatted{PipeOpSplitMultiout$new(id = "splitmultiout", param_vals = list())
}
\itemize{
\item \code{id} :: \code{character(1)}\cr
Identifier of the resulting object, default \code{"ovrsplit"}.
\item \code{param_vals} :: named \code{list}\cr
List of hyperparameter settings, overwriting the hyperparameter settings that would otherwise be set during construction. Default \code{list()}.
}
}

\section{Input and Output Channels}{

\code{\link{PipeOpSplitMultiout}} has one input channel named \code{"input"} taking a \code{\link{TaskMultiOutput}}
both during training and prediction.

\code{\link{PipeOpSplitMultiout}} has one output channel named \code{"output"} returning a \code{\link{Multiplicity}} of
\code{\link[mlr3:Task]{Tasks}}s both during training and prediction.
}

\section{State}{

The \verb{$state} contains the original task_types of the \code{\link{TaskMultiOutput}} supplied
during training.
}

\section{Parameters}{

\code{\link{PipeOpSplitMultiout}} has no parameters.
}

\section{Internals}{


The names of the element of the output \code{\link{Multiplicity}} are given by the levels of the target.

Should be used in combination with \code{\link{PipeOpPredictionMultiOutUnite}}.
}

\section{Fields}{

Only fields inherited from \code{\link{PipeOp}}.
}

\section{Methods}{

Only methods inherited from \code{\link{PipeOp}}.
}

\examples{
library(mlr3)
task = tsk("linnerud")
po = po("spllitmultiout")
po$train(list(task))
po$predict(list(task))
Initialize a new R6 class.

}
\seealso{
Other PipeOps: 
\code{\link{mlr_pipeops_multilrn}},
\code{\link{mlr_pipeops_multioutunite}}

Other Multiplicity PipeOps: 
\code{\link{mlr_pipeops_multioutunite}}

Other Experimental Features: 
\code{\link{mlr_pipeops_multioutunite}}
}
\concept{Experimental Features}
\concept{Multiplicity PipeOps}
\concept{PipeOps}
\section{Super class}{
\code{\link[mlr3pipelines:PipeOp]{mlr3pipelines::PipeOp}} -> \code{PipeOpSplitMultiout}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-new}{\code{PipeOpSplitMultiout$new()}}
\item \href{#method-clone}{\code{PipeOpSplitMultiout$clone()}}
}
}
\if{html}{
\out{<details open ><summary>Inherited methods</summary>}
\itemize{
\item \out{<span class="pkg-link" data-pkg="mlr3pipelines" data-topic="PipeOp" data-id="predict">}\href{../../mlr3pipelines/html/PipeOp.html#method-predict}{\code{mlr3pipelines::PipeOp$predict()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="mlr3pipelines" data-topic="PipeOp" data-id="print">}\href{../../mlr3pipelines/html/PipeOp.html#method-print}{\code{mlr3pipelines::PipeOp$print()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="mlr3pipelines" data-topic="PipeOp" data-id="train">}\href{../../mlr3pipelines/html/PipeOp.html#method-train}{\code{mlr3pipelines::PipeOp$train()}}\out{</span>}
}
\out{</details>}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-new"></a>}}
\if{latex}{\out{\hypertarget{method-new}{}}}
\subsection{Method \code{new()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{PipeOpSplitMultiout$new(id = "targetsplit", param_vals = list())}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{id}}{\code{character(1)}\cr
Identifier of the resulting  object, internally defaulting "targetsplit".}

\item{\code{param_vals}}{named \code{list}\cr
List of hyperparameter settings, overwriting the hyperparameter settings that would otherwise be set during construction. Default \code{list()}.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-clone"></a>}}
\if{latex}{\out{\hypertarget{method-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{PipeOpSplitMultiout$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
