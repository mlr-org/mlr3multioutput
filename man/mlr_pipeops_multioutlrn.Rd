% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/PipeOps.R
\name{mlr_pipeops_multioutlrn}
\alias{mlr_pipeops_multioutlrn}
\alias{PipeOpMultiLearner}
\title{PipeOpMultiLearner}
\format{
\code{\link{R6Class}} object inheriting from \code{\link{PipeOp}}.
}
\description{
Wraps a \code{list} of \code{\link[mlr3:Learner]{mlr3::Learner}}s into a \code{\link{PipeOp}}.

Inherits the \verb{$param_set}s (and therefore \verb{$param_set$values}) from all
\code{\link[mlr3:Learner]{Learner}}s it is constructed from.
}
\section{Input and Output Channels}{

\code{\link{PipeOpMultiLearner}} has one input channel named \code{"input"}, taking a \code{\link[mlr3:Task]{Task}}
specific to the \code{\link[mlr3:Learner]{Learner}}
type given to \code{learner} during construction; both during training and prediction.

\code{\link{PipeOpMultiLearner}} has one output channel named \code{"output"}, producing \code{NULL} during training
and a \code{\link[mlr3pipelines:Multiplicity]{Multiplicity}} of \code{\link[mlr3:Prediction]{Predictions}}
during prediction; this subclass is specific to the \code{\link[mlr3:Learner]{Learner}} type given to
\code{learner} during construction.

The output during prediction is a \code{\link[mlr3pipelines:Multiplicity]{Multiplicity}} of
\code{\link[mlr3:Prediction]{Predictions}} on the input data, produced by the \code{\link[mlr3:Learner]{Learners}}
trained on the training input data.
}

\section{State}{

The \verb{$state} is set to the \verb{$state} slot of the \code{\link[mlr3:Learner]{Learner}} object. It is a named
\code{list} with members:
of states for each separate \code{Task} provided via the incoming \code{Multiplicity}.\
Each element contains the following slots:
\itemize{
\item \code{model} :: \code{any}\cr
Model created by the \code{\link[mlr3:Learner]{Learner}}'s \verb{$.train()} function.
\item \code{train_log} :: \code{\link{data.table}} with columns \code{class} (\code{character}), \code{msg} (\code{character})\cr
Errors logged during training.
\item \code{train_time} :: \code{numeric(1)}\cr
Training time, in seconds.
\item \code{predict_log} :: \code{NULL} | \code{\link{data.table}} with columns \code{class} (\code{character}),
\code{msg} (\code{character})\cr
Errors logged during prediction.
\item \code{predict_time} :: \code{NULL} | \code{numeric(1)}
Prediction time, in seconds.
}
}

\section{Parameters}{

The parameters are exactly the parameters of the \code{\link[mlr3:Learner]{Learners}} wrapped
by this object.
}

\section{Internals}{

The \verb{$state} is currently not updated by prediction, so the \verb{$state$predict_log} and
\verb{$state$predict_time} will always be \code{NULL}.
}

\section{Methods}{

Methods inherited from \code{\link{PipeOp}}.
}

\examples{
library("mlr3")
library("mlr3pipelines")

task = tsk("linnerud")
learners = list(
  classif = lrn("classif.rpart", cp = 0.1),
  regr = lrn("regr.rpart")
)
lrn_po = mlr_pipeops$get("multioutlrn", learners)

# Train the graph
gr = po("multioutsplit") \%>>\% lrn_po
gr$train(task)
gr$predict(task)
}
\seealso{
Other PipeOps: 
\code{\link{mlr_pipeops_multioutsplit}},
\code{\link{mlr_pipeops_multioutunite}}

Other Multiplicity PipeOps: 
\code{\link{mlr_pipeops_multioutsplit}},
\code{\link{mlr_pipeops_multioutunite}}

Other Experimental Features: 
\code{\link{mlr_pipeops_multioutsplit}},
\code{\link{mlr_pipeops_multioutunite}}
}
\concept{Experimental Features}
\concept{Multiplicity PipeOps}
\concept{PipeOps}
\section{Super class}{
\code{\link[mlr3pipelines:PipeOp]{mlr3pipelines::PipeOp}} -> \code{PipeOpMultiLearner}
}
\section{Active bindings}{
\if{html}{\out{<div class="r6-active-bindings">}}
\describe{
\item{\code{id}}{(\code{character(1)})\cr
Access or set the \code{id}.}

\item{\code{learners}}{(\code{list()})\cr
Access the stored learners.}

\item{\code{learner_models}}{(\code{list()})\cr
Access the trained learners.}

\item{\code{predict_types}}{(\code{list()})\cr
Access the predict_types.}
}
\if{html}{\out{</div>}}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-new}{\code{PipeOpMultiLearner$new()}}
\item \href{#method-clone}{\code{PipeOpMultiLearner$clone()}}
}
}
\if{html}{
\out{<details open ><summary>Inherited methods</summary>}
\itemize{
\item \out{<span class="pkg-link" data-pkg="mlr3pipelines" data-topic="PipeOp" data-id="predict">}\href{../../mlr3pipelines/html/PipeOp.html#method-predict}{\code{mlr3pipelines::PipeOp$predict()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="mlr3pipelines" data-topic="PipeOp" data-id="print">}\href{../../mlr3pipelines/html/PipeOp.html#method-print}{\code{mlr3pipelines::PipeOp$print()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="mlr3pipelines" data-topic="PipeOp" data-id="train">}\href{../../mlr3pipelines/html/PipeOp.html#method-train}{\code{mlr3pipelines::PipeOp$train()}}\out{</span>}
}
\out{</details>}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-new"></a>}}
\if{latex}{\out{\hypertarget{method-new}{}}}
\subsection{Method \code{new()}}{
Initialize a new R6 class.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{PipeOpMultiLearner$new(learners, id = NULL, param_vals = list())}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{learners}}{\code{list()}\cr
List of \code{\link[mlr3:Learner]{Learner}} | \code{character(1)}, either:
\itemize{
\item One learner for each \code{task_type}
\item One learner for each \code{target}, requires list to be named with the Task's \code{target_names}.
}}

\item{\code{id}}{\code{character(1)}\cr
Identifier of the resulting  object, internally defaulting to the combined \code{ids} of the
\code{\link[mlr3:Learner]{Learner}} being wrapped.}

\item{\code{param_vals}}{named \code{list}\cr
List of hyperparameter settings, overwriting the hyperparameter settings that would
otherwise be set during construction. Default \code{list()}.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-clone"></a>}}
\if{latex}{\out{\hypertarget{method-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{PipeOpMultiLearner$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
