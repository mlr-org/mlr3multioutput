% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/LearnerMultiOutputKeras.R
\name{LearnerMultioutputKeras}
\alias{LearnerMultioutputKeras}
\alias{mlr_learners_multiout.keras}
\title{Keras Neural Network with custom architecture (Multilabel)}
\format{
\code{\link[R6:R6Class]{R6::R6Class()}} inheriting from \link[mlr3:LearnerMultioutput]{mlr3::LearnerMultioutput}.
}
\description{
Neural Network using Keras and Tensorflow.
This learner allows for supplying a custom architecture.
Calls \code{\link[keras:reexports]{keras::fit()}} from package \CRANpkg{keras}.

Parameters:
Most of the parameters can be obtained from the \code{keras} documentation.
Some exceptions are documented here.
\itemize{
\item \code{model}: A compiled keras model suited for the task.
\item \code{class_weight}: A named list of class-weights
for the different classes numbered from 0 to c-1 (for c classes).\preformatted{Example:
wts = c(0.5, 1)
setNames(as.list(wts), seq_len(length(wts)) - 1)
}
\item \code{callbacks}: A list of keras callbacks.
See \code{?callbacks}.
}
}
\section{Construction}{
\preformatted{LearnerMultioutputKeras$new()
mlr3::mlr_learners$get("multiout.keras")
mlr3::lrn("multiout.keras")
}
}

\section{Learner Methods}{


Keras Learners offer several methods for easy access to the
stored models.
\itemize{
\item \code{.$plot()}\cr
Plots the history, i.e. the train-validation loss during training.
\item \code{.$save(file_path)}\cr
Dumps the model to a provided file_path in 'h5' format.
\item \code{.$load_model_from_file(file_path)}\cr
Loads a model saved using \code{saved} back into the learner.
The model needs to be saved separately when the learner is serialized.
In this case, the learner can be restored from this function.
Currently not implemented for 'TabNet'.
\item \code{.$lr_find(task, epochs, lr_min, lr_max, batch_size)}\cr
Employ an implementation of the learning rate finder as popularized by
Jeremy Howard in fast.ai (http://course.fast.ai/) for the learner.
For more info on parameters, see \code{find_lr}.
}
}

\examples{
 # Define a model
 library(keras)
 model = keras_model_sequential() \%>\%
 layer_dense(units = 12L, input_shape = 4L, activation = "relu") \%>\%
 layer_dense(units = 12L, activation = "relu") \%>\%
 layer_dense(units = 3L, activation = "sigmoid") \%>\%
   compile(optimizer = optimizer_sgd(),
     loss = "binary_crossentropy",
     metrics = "accuracy")
 # Create the learner
 learner = LearnerMultioutputKeras$new()
 learner$param_set$values$model = model
 learner$train(mlr3::mlr_tasks$get("flags"))
}
\seealso{
\link[mlr3misc:Dictionary]{Dictionary} of \link[mlr3:Learner]{Learners}: \link[mlr3:mlr_learners]{mlr3::mlr_learners}
}
\section{Super classes}{
\code{\link[mlr3:Learner]{mlr3::Learner}} -> \code{\link[mlr3multioutput:LearnerMultioutput]{mlr3multioutput::LearnerMultioutput}} -> \code{LearnerMultioutputKeras}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-new}{\code{LearnerMultioutputKeras$new()}}
\item \href{#method-save}{\code{LearnerMultioutputKeras$save()}}
\item \href{#method-load_model_from_file}{\code{LearnerMultioutputKeras$load_model_from_file()}}
\item \href{#method-plot}{\code{LearnerMultioutputKeras$plot()}}
\item \href{#method-lr_find}{\code{LearnerMultioutputKeras$lr_find()}}
\item \href{#method-clone}{\code{LearnerMultioutputKeras$clone()}}
}
}
\if{html}{
\out{<details ><summary>Inherited methods</summary>}
\itemize{
\item \out{<span class="pkg-link" data-pkg="mlr3" data-topic="Learner" data-id="format">}\href{../../mlr3/html/Learner.html#method-format}{\code{mlr3::Learner$format()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="mlr3" data-topic="Learner" data-id="help">}\href{../../mlr3/html/Learner.html#method-help}{\code{mlr3::Learner$help()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="mlr3" data-topic="Learner" data-id="predict">}\href{../../mlr3/html/Learner.html#method-predict}{\code{mlr3::Learner$predict()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="mlr3" data-topic="Learner" data-id="predict_newdata">}\href{../../mlr3/html/Learner.html#method-predict_newdata}{\code{mlr3::Learner$predict_newdata()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="mlr3" data-topic="Learner" data-id="print">}\href{../../mlr3/html/Learner.html#method-print}{\code{mlr3::Learner$print()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="mlr3" data-topic="Learner" data-id="reset">}\href{../../mlr3/html/Learner.html#method-reset}{\code{mlr3::Learner$reset()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="mlr3" data-topic="Learner" data-id="train">}\href{../../mlr3/html/Learner.html#method-train}{\code{mlr3::Learner$train()}}\out{</span>}
}
\out{</details>}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-new"></a>}}
\if{latex}{\out{\hypertarget{method-new}{}}}
\subsection{Method \code{new()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{LearnerMultioutputKeras$new(
  id = "multiout.keras",
  predict_types = c("response", "prob"),
  feature_types = c("integer", "numeric"),
  properties = c("multilabel"),
  packages = "keras",
  man = "mlr3keras::mlr_learners_classif.keras",
  architecture = KerasArchitectureCustomModel$new()
)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-save"></a>}}
\if{latex}{\out{\hypertarget{method-save}{}}}
\subsection{Method \code{save()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{LearnerMultioutputKeras$save(filepath)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-load_model_from_file"></a>}}
\if{latex}{\out{\hypertarget{method-load_model_from_file}{}}}
\subsection{Method \code{load_model_from_file()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{LearnerMultioutputKeras$load_model_from_file(filepath)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-plot"></a>}}
\if{latex}{\out{\hypertarget{method-plot}{}}}
\subsection{Method \code{plot()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{LearnerMultioutputKeras$plot()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-lr_find"></a>}}
\if{latex}{\out{\hypertarget{method-lr_find}{}}}
\subsection{Method \code{lr_find()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{LearnerMultioutputKeras$lr_find(
  task,
  epochs = 5L,
  lr_min = 10^-4,
  lr_max = 0.8,
  batch_size = 128L
)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-clone"></a>}}
\if{latex}{\out{\hypertarget{method-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{LearnerMultioutputKeras$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
